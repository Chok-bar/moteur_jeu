syntax = "proto3";

enum PlayerRole {
  Villager = 0;
  Wolf = 1;
}

message Position {
  int32 row = 1;
  int32 col = 2;
}

message Move {
  Position next_position = 1;
}

message GameListRequest {
  // Pas de données nécessaires pour cette requête
}

message GameListReply {
  bool status = 1;
  repeated int32 id_games = 2;
}

message GameSubscribeRequest {
  string player = 1;
  int32 id_game = 2;
}

message GameSubscribeReply {
  bool status = 1;
  PlayerRole role = 2;
  int32 id_player = 3;
}

message GetGameStatusRequest {
  int32 id_game = 1;
  int32 id_player = 2;
}

message GetGameStatusReply {
  bool status = 1;
  bool started = 2;
  int32 round_in_progress = 3;
  string winner = 4;
  bool alive = 5;
}

message GetGameboardStatusRequest {
  int32 id_party = 1;
  int32 id_player = 2;
}

message GetGameboardStatusReply {
  bool status = 1;
  string visible_cells = 2;
}

message MoveRequest {
  int32 id_party = 1;
  int32 id_player = 2;
  string move = 3;
}

message MoveResponse {
  bool status = 1;
  int32 round_in_progress = 2;
  Move move = 3;
}

message CreateGameRequest {
  // No input data needed
}

message CreateGameResponse {
  string game_id = 1;
  bool success = 2;
  string error_message = 3;
}
  
service GameServer {
  rpc GameList(GameListRequest) returns (GameListReply) {}
  rpc GameSubscribe(GameSubscribeRequest) returns (GameSubscribeReply) {}
  rpc GetGameStatus(GetGameStatusRequest) returns (GetGameStatusReply) {}
  rpc GetGameboardStatus(GetGameboardStatusRequest) returns (GetGameboardStatusReply) {}
  rpc Move(MoveRequest) returns (MoveResponse) {}
  rpc CreateGame(CreateGameRequest) returns (CreateGameResponse) {}
}
